{"version":3,"sources":["togglePassword.js","tags.js"],"names":["togglePasswordVisibility","eyeIcon","document","getElementById","passwordInput","passwordInput2","addEventListener","type","classList","remove","add","tagsInput","tagsDiv","tagsInputHidden","querySelector","tags","Set","mostrarTags","textContent","forEach","tag","etiqueta","createElement","ondblclick","eliminatag","appendChild","value","Array","from","toString","e","target","delete","console","log","keyCode","trim","preventDefault","split","filter","formattedTag","charAt","toUpperCase","slice","toLowerCase"],"mappings":"AAAA,SAAAA,2BACA,MAAAC,EAAAC,SAAAC,eAAA,YACAC,EAAAF,SAAAC,eAAA,YACAE,EAAAH,SAAAC,eAAA,aAEAF,GAAAG,GACAH,EAAAK,iBAAA,SAAA,WACA,aAAAF,EAAAG,MACAH,EAAAG,KAAA,OACAF,IACAA,EAAAE,KAAA,QAEAN,EAAAO,UAAAC,OAAA,UACAR,EAAAO,UAAAE,IAAA,kBAEAN,EAAAG,KAAA,WACAF,IACAA,EAAAE,KAAA,YAEAN,EAAAO,UAAAC,OAAA,gBACAR,EAAAO,UAAAE,IAAA,eChBA,WAEA,MAAAC,EAAAT,SAAAC,eAAA,cAEA,GAAAQ,EAAA,CAEA,MAAAC,EAAAV,SAAAC,eAAA,QACAU,EAAAX,SAAAY,cAAA,iBAGA,IAAAC,EAAA,IAAAC,IAsCA,SAAAC,IAEAL,EAAAM,YAAA,GAGAH,EAAAI,QAAAC,IACA,MAAAC,EAAAnB,SAAAoB,cAAA,MACAD,EAAAb,UAAAE,IAAA,mBACAW,EAAAH,YAAAE,EACAC,EAAAE,WAAAC,EACAZ,EAAAa,YAAAJ,KAWAR,EAAAa,MAAAC,MAAAC,KAAAb,GAAAc,WAOA,SAAAL,EAAAM,GACA,MAAAV,EAAAU,EAAAC,OAAAb,YACAH,EAAAiB,OAAAZ,GACAa,QAAAC,IAAAnB,GACAE,IAnEAN,EAAAL,iBAAA,YAMA,SAAAwB,GACA,GAAA,KAAAA,EAAAK,QAAA,CAEA,GAAA,KAAAL,EAAAC,OAAAL,MAAAU,QAAAN,EAAAC,OAAAL,MAAA,EACA,OAGAI,EAAAO,iBAGAP,EAAAC,OAAAL,MAAAY,MAAA,KAAAC,OAAAnB,GAAA,KAAAA,EAAAgB,QAGAjB,QAAAC,IACA,MAAAoB,EAAApB,EAAAqB,OAAA,GAAAC,cAAAtB,EAAAuB,MAAA,GAAAC,cACA7B,EAAAL,IAAA8B,KAIA7B,EAAAe,MAAA,GAGAT,SAzCA,GDsBAjB","file":"bundle.js","sourcesContent":["function togglePasswordVisibility() {\r\n\tconst eyeIcon = document.getElementById(\"eye-icon\");\r\n\tconst passwordInput = document.getElementById(\"password\");\r\n\tconst passwordInput2 = document.getElementById(\"password2\");\r\n\r\n\tif (eyeIcon && passwordInput) {\r\n\t\teyeIcon.addEventListener(\"click\", function () {\r\n\t\t\tif (passwordInput.type === \"password\") {\r\n\t\t\t\tpasswordInput.type = \"text\";\r\n\t\t\t\tif (passwordInput2) {\r\n\t\t\t\t\tpasswordInput2.type = \"text\";\r\n\t\t\t\t}\r\n\t\t\t\teyeIcon.classList.remove(\"fa-eye\");\r\n\t\t\t\teyeIcon.classList.add(\"fa-eye-slash\");\r\n\t\t\t} else {\r\n\t\t\t\tpasswordInput.type = \"password\";\r\n\t\t\t\tif (passwordInput2) {\r\n\t\t\t\t\tpasswordInput2.type = \"password\";\r\n\t\t\t\t}\r\n\t\t\t\teyeIcon.classList.remove(\"fa-eye-slash\");\r\n\t\t\t\teyeIcon.classList.add(\"fa-eye\");\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\ntogglePasswordVisibility();\r\n","/**\r\n * Este módulo maneja la funcionalidad de gestionar etiquetas en un campo de entrada.\r\n * Escucha los cambios en el campo de entrada, almacena las etiquetas en un conjunto y actualiza la interfaz de usuario en consecuencia.\r\n */\r\n(function () {\r\n\t// Obtener el elemento de entrada de etiquetas\r\n\tconst tagsInput = document.getElementById(\"tags_input\");\r\n\r\n\tif (tagsInput) {\r\n\t\t// Obtener el elemento contenedor de etiquetas y el campo de entrada oculto para almacenar las etiquetas\r\n\t\tconst tagsDiv = document.getElementById(\"tags\");\r\n\t\tconst tagsInputHidden = document.querySelector(\"[name='tags']\");\r\n\r\n\t\t// Crear un conjunto para almacenar las etiquetas\r\n\t\tlet tags = new Set();\r\n\r\n\t\t// Escuchar eventos de pulsación de teclas en el campo de entrada de etiquetas\r\n\t\ttagsInput.addEventListener(\"keypress\", guardarTag);\r\n\r\n\t\t/**\r\n\t\t * Función para manejar el guardado de una etiqueta cuando el usuario presiona la tecla de coma (código de tecla 44)\r\n\t\t * @param {KeyboardEvent} e - El objeto de evento de pulsación de tecla\r\n\t\t */\r\n\t\tfunction guardarTag(e) {\r\n\t\t\tif (e.keyCode === 44) {\r\n\t\t\t\t// Verificar si el valor de entrada está vacío o tiene menos de 1 caracter\r\n\t\t\t\tif (e.target.value.trim() === \"\" || e.target.value < 1) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\t// Dividir el valor de entrada por comas y filtrar cualquier etiqueta vacía\r\n\t\t\t\tconst newTags = e.target.value.split(\",\").filter((tag) => tag.trim() !== \"\");\r\n\r\n\t\t\t\t// Formatear cada etiqueta capitalizando la primera letra y convirtiendo el resto en minúsculas\r\n\t\t\t\tnewTags.forEach((tag) => {\r\n\t\t\t\t\tconst formattedTag = tag.charAt(0).toUpperCase() + tag.slice(1).toLowerCase();\r\n\t\t\t\t\ttags.add(formattedTag);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Limpiar el campo de entrada\r\n\t\t\t\ttagsInput.value = \"\";\r\n\r\n\t\t\t\t// Actualizar la interfaz de usuario para mostrar las etiquetas\r\n\t\t\t\tmostrarTags();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Función para mostrar las etiquetas en la interfaz de usuario\r\n\t\t */\r\n\t\tfunction mostrarTags() {\r\n\t\t\t// Limpiar el contenedor de etiquetas\r\n\t\t\ttagsDiv.textContent = \"\";\r\n\r\n\t\t\t// Crear un elemento de lista para cada etiqueta y agregarlo al contenedor de etiquetas\r\n\t\t\ttags.forEach((tag) => {\r\n\t\t\t\tconst etiqueta = document.createElement(\"li\");\r\n\t\t\t\tetiqueta.classList.add(\"formulario__tag\");\r\n\t\t\t\tetiqueta.textContent = tag;\r\n\t\t\t\tetiqueta.ondblclick = eliminatag;\r\n\t\t\t\ttagsDiv.appendChild(etiqueta);\r\n\t\t\t});\r\n\r\n\t\t\t// Actualizar el campo de entrada oculto con las etiquetas\r\n\t\t\tactualizarInputHidden();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Función para actualizar el campo de entrada oculto con las etiquetas\r\n\t\t */\r\n\t\tfunction actualizarInputHidden() {\r\n\t\t\ttagsInputHidden.value = Array.from(tags).toString();\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Función para manejar la eliminación de una etiqueta cuando se hace doble clic\r\n\t\t * @param {MouseEvent} e - El objeto de evento de doble clic\r\n\t\t */\r\n\t\tfunction eliminatag(e) {\r\n\t\t\tconst tag = e.target.textContent;\r\n\t\t\ttags.delete(tag);\r\n\t\t\tconsole.log(tags);\r\n\t\t\tmostrarTags();\r\n\t\t}\r\n\t}\r\n})();\r\n"]}